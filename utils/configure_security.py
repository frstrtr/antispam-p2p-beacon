#!/usr/bin/env python3
"""
P2P Network Security Configuration Management Tool

This tool helps configure and manage security settings for the antispam-beacon P2P network.
"""

import os
import sys
import secrets
import argparse
import json
from pathlib import Path

def load_env_file():
    """Load existing .env file or create empty dict."""
    env_file = Path(".env")
    config = {}
    
    if env_file.exists():
        with open(env_file, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#'):
                    if '=' in line:
                        key, value = line.split('=', 1)
                        config[key] = value
    return config

def save_env_file(config):
    """Save configuration to .env file."""
    with open(".env", 'w') as f:
        f.write("# Antispam Beacon Configuration\n")
        f.write("# Generated by security configuration script\n\n")
        
        # Group configurations
        basic_configs = ['BEACON_MODE_ONLY']
        security_configs = [k for k in config.keys() if any(sec in k for sec in ['SECURITY', 'NETWORK_SECRET', 'ALLOWED', 'BLOCKED', 'MAX_', 'RATE_', 'REQUIRE_', 'MESSAGE_', 'LOG_'])]
        other_configs = [k for k in config.keys() if k not in basic_configs and k not in security_configs]
        
        # Write basic configurations
        if any(k in config for k in basic_configs):
            f.write("# Basic Configuration\n")
            for key in basic_configs:
                if key in config:
                    f.write(f"{key}={config[key]}\n")
            f.write("\n")
        
        # Write security configurations
        if security_configs:
            f.write("# Security Configuration\n")
            for key in sorted(security_configs):
                f.write(f"{key}={config[key]}\n")
            f.write("\n")
        
        # Write other configurations
        if other_configs:
            f.write("# Other Configuration\n")
            for key in sorted(other_configs):
                f.write(f"{key}={config[key]}\n")

def generate_network_key():
    """Generate a secure network key."""
    return secrets.token_hex(32)

def setup_basic_security(args):
    """Set up basic security configuration."""
    print("üîí Setting up basic P2P network security...")
    
    config = load_env_file()
    
    # Generate network secret key if not exists
    if 'NETWORK_SECRET_KEY' not in config or args.regenerate_key:
        print("üîë Generating new network secret key...")
        config['NETWORK_SECRET_KEY'] = generate_network_key()
        print("‚úÖ Network secret key generated")
    
    # Enable security
    config['ENABLE_P2P_SECURITY'] = 'true'
    config['REQUIRE_NODE_AUTHENTICATION'] = 'true'
    
    # Set reasonable defaults
    config.setdefault('MAX_CONNECTIONS_PER_IP', '3')
    config.setdefault('CONNECTION_RATE_LIMIT', '10')
    config.setdefault('MESSAGE_RATE_LIMIT', '100')
    config.setdefault('LOG_SECURITY_EVENTS', 'true')
    config.setdefault('SECURITY_LOG_FILE', 'security.log')
    
    # Message signing (optional by default)
    if args.enable_message_signing:
        config['ENABLE_MESSAGE_SIGNING'] = 'true'
        config['REJECT_UNSIGNED_MESSAGES'] = 'true'
        print("‚úÖ Message signing enabled")
    
    save_env_file(config)
    print("‚úÖ Basic security configuration saved to .env")
    print("üîê Your network is now protected with:")
    print("  - Pre-shared key authentication")
    print("  - Connection rate limiting") 
    print("  - Message rate limiting")
    print("  - Security event logging")
    
def disable_security(args):
    """Disable P2P network security."""
    print("‚ö†Ô∏è  Disabling P2P network security...")
    
    config = load_env_file()
    config['ENABLE_P2P_SECURITY'] = 'false'
    config['REQUIRE_NODE_AUTHENTICATION'] = 'false'
    config['ENABLE_MESSAGE_SIGNING'] = 'false'
    config['REJECT_UNSIGNED_MESSAGES'] = 'false'
    
    save_env_file(config)
    print("‚ùå Security disabled - your network is now vulnerable!")
    print("‚ö†Ô∏è  Only use this for testing or trusted environments")

def add_allowed_node(args):
    """Add a node to the whitelist."""
    config = load_env_file()
    
    allowed_nodes = config.get('ALLOWED_NODE_KEYS', '').split(',') if config.get('ALLOWED_NODE_KEYS') else []
    allowed_nodes = [n.strip() for n in allowed_nodes if n.strip()]
    
    if args.node_key not in allowed_nodes:
        allowed_nodes.append(args.node_key)
        config['ALLOWED_NODE_KEYS'] = ','.join(allowed_nodes)
        save_env_file(config)
        print(f"‚úÖ Added node {args.node_key} to whitelist")
    else:
        print(f"‚ÑπÔ∏è  Node {args.node_key} already in whitelist")

def remove_allowed_node(args):
    """Remove a node from the whitelist."""
    config = load_env_file()
    
    allowed_nodes = config.get('ALLOWED_NODE_KEYS', '').split(',') if config.get('ALLOWED_NODE_KEYS') else []
    allowed_nodes = [n.strip() for n in allowed_nodes if n.strip()]
    
    if args.node_key in allowed_nodes:
        allowed_nodes.remove(args.node_key)
        config['ALLOWED_NODE_KEYS'] = ','.join(allowed_nodes)
        save_env_file(config)
        print(f"‚úÖ Removed node {args.node_key} from whitelist")
    else:
        print(f"‚ÑπÔ∏è  Node {args.node_key} not in whitelist")

def add_blocked_node(args):
    """Add a node to the blacklist."""
    config = load_env_file()
    
    blocked_nodes = config.get('BLOCKED_NODE_KEYS', '').split(',') if config.get('BLOCKED_NODE_KEYS') else []
    blocked_nodes = [n.strip() for n in blocked_nodes if n.strip()]
    
    if args.node_key not in blocked_nodes:
        blocked_nodes.append(args.node_key)
        config['BLOCKED_NODE_KEYS'] = ','.join(blocked_nodes)
        save_env_file(config)
        print(f"üö´ Added node {args.node_key} to blacklist")
    else:
        print(f"‚ÑπÔ∏è  Node {args.node_key} already in blacklist")

def remove_blocked_node(args):
    """Remove a node from the blacklist."""
    config = load_env_file()
    
    blocked_nodes = config.get('BLOCKED_NODE_KEYS', '').split(',') if config.get('BLOCKED_NODE_KEYS') else []
    blocked_nodes = [n.strip() for n in blocked_nodes if n.strip()]
    
    if args.node_key in blocked_nodes:
        blocked_nodes.remove(args.node_key)
        config['BLOCKED_NODE_KEYS'] = ','.join(blocked_nodes)
        save_env_file(config)
        print(f"‚úÖ Removed node {args.node_key} from blacklist")
    else:
        print(f"‚ÑπÔ∏è  Node {args.node_key} not in blacklist")

def add_blocked_ip(args):
    """Add an IP to the blacklist."""
    config = load_env_file()
    
    blocked_ips = config.get('BLOCKED_IP_ADDRESSES', '').split(',') if config.get('BLOCKED_IP_ADDRESSES') else []
    blocked_ips = [ip.strip() for ip in blocked_ips if ip.strip()]
    
    if args.ip_address not in blocked_ips:
        blocked_ips.append(args.ip_address)
        config['BLOCKED_IP_ADDRESSES'] = ','.join(blocked_ips)
        save_env_file(config)
        print(f"üö´ Added IP {args.ip_address} to blacklist")
    else:
        print(f"‚ÑπÔ∏è  IP {args.ip_address} already in blacklist")

def remove_blocked_ip(args):
    """Remove an IP from the blacklist."""
    config = load_env_file()
    
    blocked_ips = config.get('BLOCKED_IP_ADDRESSES', '').split(',') if config.get('BLOCKED_IP_ADDRESSES') else []
    blocked_ips = [ip.strip() for ip in blocked_ips if ip.strip()]
    
    if args.ip_address in blocked_ips:
        blocked_ips.remove(args.ip_address)
        config['BLOCKED_IP_ADDRESSES'] = ','.join(blocked_ips)
        save_env_file(config)
        print(f"‚úÖ Removed IP {args.ip_address} from blacklist")
    else:
        print(f"‚ÑπÔ∏è  IP {args.ip_address} not in blacklist")

def show_status(args):
    """Show current security status."""
    config = load_env_file()
    
    print("üîí P2P Network Security Status")
    print("=" * 40)
    
    security_enabled = config.get('ENABLE_P2P_SECURITY', 'true').lower() in ('true', '1', 'yes')
    auth_required = config.get('REQUIRE_NODE_AUTHENTICATION', 'true').lower() in ('true', '1', 'yes')
    message_signing = config.get('ENABLE_MESSAGE_SIGNING', 'false').lower() in ('true', '1', 'yes')
    reject_unsigned = config.get('REJECT_UNSIGNED_MESSAGES', 'false').lower() in ('true', '1', 'yes')
    
    # Security status
    if security_enabled:
        print("üü¢ Security: ENABLED")
    else:
        print("üî¥ Security: DISABLED")
    
    print(f"üîê Authentication Required: {'YES' if auth_required else 'NO'}")
    print(f"‚úçÔ∏è  Message Signing: {'ENABLED' if message_signing else 'DISABLED'}")
    print(f"üö´ Reject Unsigned: {'YES' if reject_unsigned else 'NO'}")
    
    # Network key status
    if config.get('NETWORK_SECRET_KEY'):
        print("üîë Network Secret Key: CONFIGURED")
    else:
        print("‚ùå Network Secret Key: NOT CONFIGURED")
    
    # Rate limits
    print(f"üìä Max Connections/IP: {config.get('MAX_CONNECTIONS_PER_IP', '3')}")
    print(f"üìä Connection Rate Limit: {config.get('CONNECTION_RATE_LIMIT', '10')}/min")
    print(f"üìä Message Rate Limit: {config.get('MESSAGE_RATE_LIMIT', '100')}/min")
    
    # Whitelists/Blacklists
    allowed_nodes = [n.strip() for n in config.get('ALLOWED_NODE_KEYS', '').split(',') if n.strip()]
    blocked_nodes = [n.strip() for n in config.get('BLOCKED_NODE_KEYS', '').split(',') if n.strip()]
    blocked_ips = [ip.strip() for ip in config.get('BLOCKED_IP_ADDRESSES', '').split(',') if ip.strip()]
    
    print(f"‚úÖ Allowed Nodes: {len(allowed_nodes)} {'(whitelist mode)' if allowed_nodes else '(all allowed)'}")
    print(f"üö´ Blocked Nodes: {len(blocked_nodes)}")
    print(f"üö´ Blocked IPs: {len(blocked_ips)}")
    
    # Logging
    security_logging = config.get('LOG_SECURITY_EVENTS', 'true').lower() in ('true', '1', 'yes')
    print(f"üìù Security Logging: {'ENABLED' if security_logging else 'DISABLED'}")
    print(f"üìÑ Security Log File: {config.get('SECURITY_LOG_FILE', 'security.log')}")

def show_config(args):
    """Show detailed security configuration."""
    config = load_env_file()
    
    print("üìã Current Security Configuration")
    print("=" * 40)
    
    security_keys = [
        'ENABLE_P2P_SECURITY',
        'REQUIRE_NODE_AUTHENTICATION', 
        'ENABLE_MESSAGE_SIGNING',
        'REJECT_UNSIGNED_MESSAGES',
        'MAX_CONNECTIONS_PER_IP',
        'CONNECTION_RATE_LIMIT',
        'MESSAGE_RATE_LIMIT',
        'ALLOWED_NODE_KEYS',
        'BLOCKED_NODE_KEYS',
        'BLOCKED_IP_ADDRESSES',
        'LOG_SECURITY_EVENTS',
        'SECURITY_LOG_FILE'
    ]
    
    for key in security_keys:
        value = config.get(key, 'Not set')
        if key in ['ALLOWED_NODE_KEYS', 'BLOCKED_NODE_KEYS', 'BLOCKED_IP_ADDRESSES'] and value != 'Not set':
            # Format lists nicely
            items = [item.strip() for item in value.split(',') if item.strip()]
            value = f"{len(items)} items: {', '.join(items[:3])}" + ("..." if len(items) > 3 else "")
        print(f"{key}: {value}")
    
    # Don't show the actual network secret key for security
    if config.get('NETWORK_SECRET_KEY'):
        print("NETWORK_SECRET_KEY: [CONFIGURED - Hidden for security]")
    else:
        print("NETWORK_SECRET_KEY: Not set")

def main():
    parser = argparse.ArgumentParser(description="P2P Network Security Configuration Tool")
    subparsers = parser.add_subparsers(dest='command', help='Available commands')
    
    # Setup basic security
    setup_parser = subparsers.add_parser('setup', help='Set up basic security configuration')
    setup_parser.add_argument('--regenerate-key', action='store_true', help='Regenerate network secret key')
    setup_parser.add_argument('--enable-message-signing', action='store_true', help='Enable message signing')
    setup_parser.set_defaults(func=setup_basic_security)
    
    # Disable security
    disable_parser = subparsers.add_parser('disable', help='Disable P2P network security')
    disable_parser.set_defaults(func=disable_security)
    
    # Node whitelist management
    allow_parser = subparsers.add_parser('allow', help='Add node to whitelist')
    allow_parser.add_argument('node_key', help='Node UUID/key to allow')
    allow_parser.set_defaults(func=add_allowed_node)
    
    unallow_parser = subparsers.add_parser('unallow', help='Remove node from whitelist')
    unallow_parser.add_argument('node_key', help='Node UUID/key to remove from whitelist')
    unallow_parser.set_defaults(func=remove_allowed_node)
    
    # Node blacklist management
    block_parser = subparsers.add_parser('block', help='Add node to blacklist')
    block_parser.add_argument('node_key', help='Node UUID/key to block')
    block_parser.set_defaults(func=add_blocked_node)
    
    unblock_parser = subparsers.add_parser('unblock', help='Remove node from blacklist')
    unblock_parser.add_argument('node_key', help='Node UUID/key to unblock')
    unblock_parser.set_defaults(func=remove_blocked_node)
    
    # IP blacklist management
    blockip_parser = subparsers.add_parser('block-ip', help='Add IP to blacklist')
    blockip_parser.add_argument('ip_address', help='IP address to block')
    blockip_parser.set_defaults(func=add_blocked_ip)
    
    unblockip_parser = subparsers.add_parser('unblock-ip', help='Remove IP from blacklist')
    unblockip_parser.add_argument('ip_address', help='IP address to unblock')
    unblockip_parser.set_defaults(func=remove_blocked_ip)
    
    # Status and configuration display
    status_parser = subparsers.add_parser('status', help='Show security status')
    status_parser.set_defaults(func=show_status)
    
    config_parser = subparsers.add_parser('config', help='Show detailed configuration')
    config_parser.set_defaults(func=show_config)
    
    args = parser.parse_args()
    
    if args.command is None:
        parser.print_help()
        return
    
    try:
        args.func(args)
    except KeyboardInterrupt:
        print("\n‚ùå Operation cancelled")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå Error: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()
