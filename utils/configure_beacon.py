#!/usr/bin/env python3
"""
Beacon Mode Configuration Script

Simple script to enable/disable beacon mode and manage server configuration.
"""

import os
import sys
import subprocess
import time

def read_current_config():
    """Read current configuration from .env file."""
    config = {}
    if os.path.exists('.env'):
        with open('.env', 'r') as f:
            for line in f:
                if '=' in line and not line.strip().startswith('#'):
                    key, value = line.strip().split('=', 1)
                    config[key] = value
    return config

def write_config(config):
    """Write configuration to .env file."""
    with open('.env', 'w') as f:
        f.write("# Antispam Beacon Configuration\n")
        f.write("# Generated by beacon mode configuration script\n\n")
        for key, value in config.items():
            f.write(f"{key}={value}\n")

def enable_beacon_mode():
    """Enable beacon mode only."""
    config = read_current_config()
    config['BEACON_MODE_ONLY'] = 'true'
    write_config(config)
    
    print("‚úÖ BEACON MODE ENABLED")
    print("   ‚Ä¢ External APIs disabled")
    print("   ‚Ä¢ WebSocket server disabled")
    print("   ‚Ä¢ P2P network enabled")
    print("   ‚Ä¢ Local database enabled")
    print("   ‚Ä¢ HTTP API enabled (local reporting only)")

def disable_beacon_mode():
    """Disable beacon mode (enable full mode)."""
    config = read_current_config()
    config['BEACON_MODE_ONLY'] = 'false'
    write_config(config)
    
    print("‚úÖ FULL MODE ENABLED")
    print("   ‚Ä¢ External APIs enabled (lols.bot, cas.chat)")
    print("   ‚Ä¢ WebSocket server enabled")
    print("   ‚Ä¢ P2P network enabled")
    print("   ‚Ä¢ Local database enabled")
    print("   ‚Ä¢ HTTP API enabled (full functionality)")

def show_status():
    """Show current configuration status."""
    config = read_current_config()
    beacon_mode = config.get('BEACON_MODE_ONLY', 'false').lower() in ('true', '1', 'yes')
    
    print("üìä CURRENT CONFIGURATION STATUS")
    print("=" * 40)
    print(f"Mode: {'üö® BEACON MODE ONLY' if beacon_mode else 'üåü FULL MODE'}")
    print(f"Config file: {'.env (exists)' if os.path.exists('.env') else '.env (missing)'}")
    
    if beacon_mode:
        print("\nüîß Active Services:")
        print("   ‚úÖ P2P Network")
        print("   ‚úÖ Local Database")
        print("   ‚úÖ HTTP API (basic)")
        print("   ‚ùå External APIs")
        print("   ‚ùå WebSocket Server")
    else:
        print("\nüîß Active Services:")
        print("   ‚úÖ P2P Network")
        print("   ‚úÖ Local Database")
        print("   ‚úÖ HTTP API (full)")
        print("   ‚úÖ External APIs")
        print("   ‚úÖ WebSocket Server")

def test_server():
    """Test server connectivity."""
    import requests
    
    try:
        response = requests.get("http://localhost:8081/check?user_id=123456789", timeout=3)
        if response.status_code == 200:
            data = response.json()
            has_external = bool(data.get('lols_bot') or data.get('cas_chat'))
            mode = "FULL" if has_external else "BEACON"
            print(f"‚úÖ Server is running in {mode} mode")
            print(f"   Response time: {response.elapsed.total_seconds() * 1000:.2f}ms")
            return True
        else:
            print(f"‚ùå Server returned HTTP {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Server is not running or not accessible: {e}")
        return False

def restart_server():
    """Restart the server with current configuration."""
    print("üîÑ Restarting server...")
    
    # Try to stop any running server processes
    try:
        subprocess.run(['pkill', '-f', 'run_server.py'], check=False)
        time.sleep(2)
    except FileNotFoundError:
        pass
    
    # Start server in background
    with open('config_server.log', 'w') as log_file:
        process = subprocess.Popen(
            [sys.executable, 'run_server.py'],
            stdout=log_file,
            stderr=subprocess.STDOUT
        )
    
    # Wait a moment for startup
    time.sleep(3)
    
    # Test if server started successfully
    if test_server():
        print(f"‚úÖ Server restarted successfully (PID: {process.pid})")
        print("üìÑ Check config_server.log for detailed logs")
    else:
        print("‚ùå Server failed to start properly")

def show_help():
    """Show help information."""
    print("üöÄ ANTISPAM BEACON MODE CONFIGURATION")
    print("=" * 50)
    print("Usage: python configure_beacon.py [command]")
    print()
    print("Commands:")
    print("  enable     Enable beacon mode only")
    print("  disable    Disable beacon mode (enable full mode)")
    print("  status     Show current configuration")
    print("  test       Test server connectivity")
    print("  restart    Restart server with current config")
    print("  help       Show this help message")
    print()
    print("Examples:")
    print("  python configure_beacon.py enable")
    print("  python configure_beacon.py status")
    print("  python configure_beacon.py test")
    print()
    print("Beacon Mode Features:")
    print("  ‚úÖ Faster response times")
    print("  ‚úÖ Lower resource usage")
    print("  ‚úÖ Privacy-focused (no external APIs)")
    print("  ‚úÖ Simplified deployment")
    print("  ‚úÖ Full P2P functionality")

def main():
    """Main function."""
    if len(sys.argv) < 2:
        show_help()
        return
    
    command = sys.argv[1].lower()
    
    if command == "enable":
        enable_beacon_mode()
    elif command == "disable":
        disable_beacon_mode()
    elif command == "status":
        show_status()
    elif command == "test":
        test_server()
    elif command == "restart":
        restart_server()
    elif command == "help":
        show_help()
    else:
        print(f"‚ùå Unknown command: {command}")
        print("üí° Use 'python configure_beacon.py help' for available commands")

if __name__ == "__main__":
    main()
