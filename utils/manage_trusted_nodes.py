#!/usr/bin/env python3
"""
Node Whitelist Management Tool for Antispam Beacon P2P Network
Usage: python manage_trusted_nodes.py [add|remove|list|clear] [node_key]
"""

import os
import sys
from typing import Set

def load_env_file() -> dict:
    """Load .env file and return as dictionary"""
    env_vars = {}
    if os.path.exists('.env'):
        with open('.env', 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    env_vars[key] = value
    return env_vars

def save_env_file(env_vars: dict):
    """Save environment variables back to .env file"""
    with open('.env', 'w', encoding='utf-8') as f:
        f.write("# Antispam Beacon Configuration\n")
        f.write("# Generated by node management script\n\n")
        
        # Group configurations
        basic_configs = ['BEACON_MODE_ONLY']
        security_configs = [k for k in env_vars.keys() if any(sec in k for sec in ['SECURITY', 'NETWORK_SECRET', 'ALLOWED', 'BLOCKED', 'MAX_', 'RATE_', 'REQUIRE_', 'MESSAGE_', 'LOG_'])]
        other_configs = [k for k in env_vars.keys() if k not in basic_configs and k not in security_configs]
        
        # Write basic configurations
        if any(k in env_vars for k in basic_configs):
            f.write("# Basic Configuration\n")
            for key in basic_configs:
                if key in env_vars:
                    f.write(f"{key}={env_vars[key]}\n")
            f.write("\n")
        
        # Write security configurations
        if security_configs:
            f.write("# Security Configuration\n")
            for key in sorted(security_configs):
                f.write(f"{key}={env_vars[key]}\n")
            f.write("\n")
        
        # Write other configurations
        if other_configs:
            f.write("# Other Configuration\n")
            for key in sorted(other_configs):
                f.write(f"{key}={env_vars[key]}\n")

def get_allowed_nodes() -> Set[str]:
    """Get current list of allowed nodes"""
    env_vars = load_env_file()
    allowed_nodes_str = env_vars.get('ALLOWED_NODE_KEYS', '')
    if not allowed_nodes_str:
        return set()
    return set(node.strip() for node in allowed_nodes_str.split(',') if node.strip())

def set_allowed_nodes(nodes: Set[str]):
    """Save allowed nodes to .env file"""
    env_vars = load_env_file()
    env_vars['ALLOWED_NODE_KEYS'] = ','.join(sorted(nodes))
    save_env_file(env_vars)

def add_trusted_node(node_key: str) -> bool:
    """Add a node to the trusted whitelist"""
    if not node_key or not node_key.strip():
        print("❌ Error: Node key cannot be empty")
        return False
    
    node_key = node_key.strip()
    allowed_nodes = get_allowed_nodes()
    
    if node_key in allowed_nodes:
        print(f"ℹ️  Node '{node_key}' is already in the whitelist")
        return True
    
    allowed_nodes.add(node_key)
    set_allowed_nodes(allowed_nodes)
    print(f"✅ Added trusted node: {node_key}")
    print(f"📊 Total trusted nodes: {len(allowed_nodes)}")
    
    # Show whitelist status
    if len(allowed_nodes) == 1:
        print("🔒 Whitelist mode is now ACTIVE - only trusted nodes can connect")
        print("⚠️  Restart the server to apply changes")
    
    return True

def remove_trusted_node(node_key: str) -> bool:
    """Remove a node from the trusted whitelist"""
    if not node_key or not node_key.strip():
        print("❌ Error: Node key cannot be empty")
        return False
    
    node_key = node_key.strip()
    allowed_nodes = get_allowed_nodes()
    
    if node_key not in allowed_nodes:
        print(f"ℹ️  Node '{node_key}' is not in the whitelist")
        return True
    
    allowed_nodes.remove(node_key)
    set_allowed_nodes(allowed_nodes)
    print(f"🗑️  Removed trusted node: {node_key}")
    print(f"📊 Total trusted nodes: {len(allowed_nodes)}")
    
    # Show whitelist status
    if len(allowed_nodes) == 0:
        print("🔓 Whitelist mode is now DISABLED - all nodes can connect")
        print("⚠️  Restart the server to apply changes")
    
    return True

def list_trusted_nodes():
    """List all trusted nodes"""
    allowed_nodes = get_allowed_nodes()
    
    print("🔐 Trusted Node Whitelist Status")
    print("=" * 40)
    
    if not allowed_nodes:
        print("📋 No trusted nodes configured")
        print("🔓 Whitelist mode: DISABLED (all nodes allowed)")
        print("\n💡 Use 'python manage_trusted_nodes.py add <node_key>' to add nodes")
        print("💡 Adding nodes will enable whitelist mode")
        return
    
    print(f"🔒 Whitelist mode: ACTIVE ({len(allowed_nodes)} trusted nodes)")
    print("\n📋 Trusted Nodes:")
    for i, node in enumerate(sorted(allowed_nodes), 1):
        print(f"   {i:2d}. {node}")
    
    print(f"\n📊 Summary:")
    print(f"   • Total trusted nodes: {len(allowed_nodes)}")
    print(f"   • Access control: Only listed nodes can connect")
    print(f"   • Security: Enabled")

def clear_trusted_nodes():
    """Clear all trusted nodes (interactive confirmation)"""
    allowed_nodes = get_allowed_nodes()
    
    if not allowed_nodes:
        print("📋 No trusted nodes to clear")
        return
    
    print(f"⚠️  This will remove all {len(allowed_nodes)} trusted nodes:")
    for node in sorted(allowed_nodes):
        print(f"   - {node}")
    
    print(f"\n🔓 This will DISABLE whitelist mode (all nodes will be allowed)")
    confirm = input("\n🤔 Are you sure? Type 'YES' to confirm: ")
    if confirm == 'YES':
        set_allowed_nodes(set())
        print("🗑️  All trusted nodes cleared")
        print("🔓 Whitelist mode disabled - all nodes can now connect")
        print("⚠️  Restart the server to apply changes")
    else:
        print("❌ Operation cancelled")

def show_status():
    """Show current whitelist status and security configuration"""
    print("🔐 Node Whitelist & Security Status")
    print("=" * 50)
    
    # Check whitelist status
    allowed_nodes = get_allowed_nodes()
    if allowed_nodes:
        print(f"🔒 Whitelist Mode: ACTIVE ({len(allowed_nodes)} trusted nodes)")
        print("   Only whitelisted nodes can connect")
    else:
        print("🔓 Whitelist Mode: DISABLED")
        print("   All nodes can connect (subject to other security rules)")
    
    # Check security settings
    env_vars = load_env_file()
    security_enabled = env_vars.get('ENABLE_P2P_SECURITY', 'true').lower() in ('true', '1', 'yes')
    auth_required = env_vars.get('REQUIRE_NODE_AUTHENTICATION', 'true').lower() in ('true', '1', 'yes')
    
    print(f"\n🛡️  Security Status:")
    print(f"   • P2P Security: {'ENABLED' if security_enabled else 'DISABLED'}")
    print(f"   • Authentication: {'REQUIRED' if auth_required else 'OPTIONAL'}")
    print(f"   • Max Connections/IP: {env_vars.get('MAX_CONNECTIONS_PER_IP', '3')}")
    print(f"   • Connection Rate Limit: {env_vars.get('CONNECTION_RATE_LIMIT', '10')}/min")
    
    blocked_nodes = env_vars.get('BLOCKED_NODE_KEYS', '')
    blocked_ips = env_vars.get('BLOCKED_IP_ADDRESSES', '')
    blocked_node_count = len([n for n in blocked_nodes.split(',') if n.strip()]) if blocked_nodes else 0
    blocked_ip_count = len([ip for ip in blocked_ips.split(',') if ip.strip()]) if blocked_ips else 0
    
    print(f"   • Blocked Nodes: {blocked_node_count}")
    print(f"   • Blocked IPs: {blocked_ip_count}")

def show_usage():
    """Show usage information"""
    print("""
🔐 Node Whitelist Management Tool

COMMANDS:
    add <node_key>      Add a trusted node to whitelist
    remove <node_key>   Remove a node from whitelist  
    list                List all trusted nodes
    clear               Clear all trusted nodes (disable whitelist)
    status              Show whitelist and security status
    help                Show this help

EXAMPLES:
    python manage_trusted_nodes.py add "trusted-beacon-001"
    python manage_trusted_nodes.py add "node-uuid-12345678"
    python manage_trusted_nodes.py remove "old-node-key"
    python manage_trusted_nodes.py list
    python manage_trusted_nodes.py status

WHITELIST BEHAVIOR:
    • No nodes in whitelist = All nodes allowed (subject to other security)
    • Nodes in whitelist = Only listed nodes allowed
    • Changes require server restart to take effect

SECURITY NOTES:
    • Use unique, hard-to-guess node keys for security
    • Monitor security.log for connection attempts
    • Combine with other security features for best protection
""")

def main():
    if len(sys.argv) < 2:
        show_usage()
        return
    
    command = sys.argv[1].lower()
    
    try:
        if command in ['help', '--help', '-h']:
            show_usage()
        elif command == 'add':
            if len(sys.argv) < 3:
                print("❌ Error: Node key required for add command")
                print("Usage: python manage_trusted_nodes.py add <node_key>")
                sys.exit(1)
            add_trusted_node(sys.argv[2])
        elif command == 'remove':
            if len(sys.argv) < 3:
                print("❌ Error: Node key required for remove command")
                print("Usage: python manage_trusted_nodes.py remove <node_key>")
                sys.exit(1)
            remove_trusted_node(sys.argv[2])
        elif command == 'list':
            list_trusted_nodes()
        elif command == 'clear':
            clear_trusted_nodes()
        elif command == 'status':
            show_status()
        else:
            print(f"❌ Unknown command: {command}")
            show_usage()
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n❌ Operation cancelled")
        sys.exit(1)
    except Exception as e:
        print(f"❌ Error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
